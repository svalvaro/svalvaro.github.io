[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Hola! I’m glad that you have found this place, I hope you can learn something new while browsing around here :).\nI use technology to solve problems, and I love doing that. I started as a bioinformatician, answering biological questions about data. Currently, I’m working as a R developer, I create digital solutions (Web applications, R packages, Report generation, and much more!). A\nYou might find me hiking outdoors or playing chess!"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "I prefer to have control of who has access to my CV. Drop me a message on Linkedin, and I’d be more than happy to send you my CV!\nHere is a meme for the inconvenience!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Currently, I am working as an R developer at Appsilon. I am focused on creating web applications focused on data analysis and data visualization for pharmaceutical companies, such as Merck, J&J or Genmab. Usually, the typical tools that I use for these are R, CSS, HTML, SQL and Javascript. This is a job I love doing; it combines my interests in life sciences and programming.\nI am a curious person by heart; I need to understand the how and why of things. That’s why after my bachelor’s in Biotechnology, I decided to study a master’s in Genetics and Evolution. This fascinating world led me to move to Prague, Czech Republic. There, I studied the genetics of Mice and their metabolism for a couple of years. I slowly became a self-taught programmer and I started to work as a bioinformatician in the proteomics field I discovered R Shiny and quickly started to create apps for my former lab, later Appsilon discovered me, reaching the present.\nI love learning by creating proof of concepts (it’s fun!). I’ll never forget when I was tinkering around with APIs, I created an R package that went kinda viral on Linkedin."
  },
  {
    "objectID": "about.html#fa-code-titlecode-symbol-profession",
    "href": "about.html#fa-code-titlecode-symbol-profession",
    "title": "About",
    "section": "",
    "text": "Currently, I am working as an R developer at Appsilon. I am focused on creating web applications focused on data analysis and data visualization for pharmaceutical companies, such as Merck, J&J or Genmab. Usually, the typical tools that I use for these are R, CSS, HTML, SQL and Javascript. This is a job I love doing; it combines my interests in life sciences and programming.\nI am a curious person by heart; I need to understand the how and why of things. That’s why after my bachelor’s in Biotechnology, I decided to study a master’s in Genetics and Evolution. This fascinating world led me to move to Prague, Czech Republic. There, I studied the genetics of Mice and their metabolism for a couple of years. I slowly became a self-taught programmer and I started to work as a bioinformatician in the proteomics field I discovered R Shiny and quickly started to create apps for my former lab, later Appsilon discovered me, reaching the present.\nI love learning by creating proof of concepts (it’s fun!). I’ll never forget when I was tinkering around with APIs, I created an R package that went kinda viral on Linkedin."
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html",
    "href": "posts/03-10-2023-birthday-paradox/index.html",
    "title": "Simulating the Birthday Paradox",
    "section": "",
    "text": "Paradoxes are named as such because they are counterintuitive. And this gives us, data-curious people, an excellent chance to play around with them.\nHow many people are needed so the probability that at least, two of them share a birthday is 50%?\nI suggest the reader stop for a couple of minutes and think about it. When I learned the answer, I was so surprised that I had to test it to believe it.\nGo to Results if you just want to know what is the probability."
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#plan",
    "href": "posts/03-10-2023-birthday-paradox/index.html#plan",
    "title": "Simulating the Birthday Paradox",
    "section": "Plan",
    "text": "Plan\nThe idea is simple. I’ll create multiple groups from two to n number of people. For each group, I’ll count how many times at least two people share a birthday. Then repeat this process multiple times (y), to obtain reproducible results\nSo if n = 4, means a group of four people, and y = 5, means to check the probabilities three times. The simulation will be like this:\n\nChoose two random people (n - 2), do they share a birthday? –&gt; Count the result. Repeat y times. Calculate the probability for a group of two people.\nChoose three random people (n - 1), do at least two of them share a birthday? –&gt; Count the result. Repeat y times. Calculate the probability for a group of three people.\nChoose four random people (n), do at least two of them share a birthday?? –&gt; Count the result. Repeat y times. Calculate the probability for a group of four people.\n\nFor each group, calculating the probability is simple. For example, if in the group of four people, only there was a simulation were people shared birthdays but no shared birthdays in the other four, the probability would be 1/5 = 20%."
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#simulation",
    "href": "posts/03-10-2023-birthday-paradox/index.html#simulation",
    "title": "Simulating the Birthday Paradox",
    "section": "Simulation",
    "text": "Simulation\nLet’s select bigger groups of up to 80 people, and let’s check them 1000 times each.\n\nnumber_people &lt;- 80\nnumber_tests &lt;- 1000\n\nWe need a function that creates random birthdays for a group of n people.\n\ngenerate_birthdays &lt;- function(n_people_group) {\n  round(runif(n = n_people_group, min = 1, max = 365), digits = 0 )\n}\ngenerate_birthdays(3)\n\n[1]  94  39 354\n\ngenerate_birthdays(10)\n\n [1] 323   5 128 169 110   1 100 347 125  68\n\n\nNote, how we are assuming that birthdays are randomly and uniformly distributed across the population. In reality, more people are born in September and October.\nLet’s create a function that will tell us if at least two people share a birthday: Since there are 365 per year we can just numbers from 1 to 365.\n\nbday_group_3_people &lt;- c(10, 46, 209) # noone share birthday, should be false\nbday_group_5_people &lt;- c(10, 46, 209, 46, 265) # two people share birthdays, should be true\nbday_group_7_people&lt;- c(10, 46, 209, 46, 265, 46, 2) # Three people share birthday, should be true\n\ncheck_share_birthday &lt;- function(data, min_num_shared_birthdays = 2) {\n  max(table(data)) &gt;= min_num_shared_birthdays\n}\n# table is a nice function that does the count for us:\ntable(bday_group_5_people)\n\nbday_group_5_people\n 10  46 209 265 \n  1   2   1   1 \n\n# Checking that the function works as expected\ncheck_share_birthday(bday_group_3_people)\n\n[1] FALSE\n\ncheck_share_birthday(bday_group_5_people)\n\n[1] TRUE\n\ncheck_share_birthday(bday_group_7_people)\n\n[1] TRUE\n\n\nThis is where the fun happens: Now we just iterate over the groups. We create a vector containing the birthdays of those people and check if those people share a birthday, if they do, we keep track of it. Then we repeat this process y times. Once we have completed y tests for a single group, we move to the next one and repeat the process.\n\nset.seed(123)\nresults &lt;- data.frame()\n\nfor(individual_group in 2:number_people) { \n  shared_birthdays_counter &lt;- 0\n\n  for (test in seq_len(number_tests)) { \n    random_birthdays_vector &lt;- generate_birthdays(individual_group) \n    \n    if (check_share_birthday(random_birthdays_vector)) {\n      shared_birthdays_counter &lt;- shared_birthdays_counter + 1\n    }\n\n  }\n  probability_duplicates &lt;- 100 * (shared_birthdays_counter/number_tests)\n\n  results &lt;- rbind(results, c(individual_group, probability_duplicates))\n}\ncolnames(results) &lt;- c(\"people_in_group\", \"probability_shared_birthday\")\nresults &lt;- round(results, 1)\nhead(results)\n\n  people_in_group probability_shared_birthday\n1               2                         0.1\n2               3                         0.7\n3               4                         1.2\n4               5                         2.7\n5               6                         4.2\n6               7                         5.6"
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#results",
    "href": "posts/03-10-2023-birthday-paradox/index.html#results",
    "title": "Simulating the Birthday Paradox",
    "section": "Results",
    "text": "Results\nLet’s check how many people are needed in a group to get a probability of ~50%.\n\nresults |&gt; \n  dplyr::filter(\n    probability_shared_birthday &gt; 45,\n    probability_shared_birthday &lt; 55\n  )\n\n  people_in_group probability_shared_birthday\n1              21                        45.3\n2              22                        45.8\n3              23                        51.9\n4              24                        53.0\n\n\nAccording to our simulation, only 23 people are needed to have a probability of 50% to share a birthday!\nI’m also curious about what is the minimum amount of people where having a shared birthday is almost certain:\n\ngroups_prob_99_perc &lt;- results |&gt; \n  dplyr::filter(\n    probability_shared_birthday &gt; 99\n  )\nhead(groups_prob_99_perc)\n\n  people_in_group probability_shared_birthday\n1              55                        99.1\n2              57                        99.4\n3              59                        99.3\n4              60                        99.2\n5              61                        99.6\n6              62                        99.7\n\n\nIt seems that with 55 people, the chances to have at least one shared birthday are 99%!"
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#visualising-the-results",
    "href": "posts/03-10-2023-birthday-paradox/index.html#visualising-the-results",
    "title": "Simulating the Birthday Paradox",
    "section": "Visualising the results",
    "text": "Visualising the results\nLet’s plot those results and see what we can observe.\n\n\nCode\nlibrary(highcharter)\n\nhchart(\n    results,\n    type = \"line\",\n    hcaes(x = people_in_group, y = probability_shared_birthday)\n  ) |&gt;\n  hc_title(text = \"&lt;b&gt;Probability of at least two people having the same birthday&lt;/b&gt;\") |&gt;\n  hc_subtitle(text = \"&lt;i&gt;A total of 1000 simulations per group were computed&lt;/i&gt;\") |&gt;\n  hc_credits(enabled = TRUE, text = \"https://svalvaro.github.io/\") |&gt;\n  hc_xAxis(title = list(text = \"Number of people in the group\")) |&gt; \n  hc_yAxis(title = list(text = \"Probability (%)\")) |&gt; \n  hc_yAxis(max = 100) |&gt; \n  hc_tooltip(\n    pointFormat = \"\n    &lt;b&gt;# People in the group: &lt;/b&gt;{point.x:,.f}&lt;br&gt;\n    &lt;b&gt;Probability: &lt;/b&gt;{point.y:,.1f}%&lt;br&gt;\"\n  ) |&gt;\n  hc_add_theme(hc_theme_economist())"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Build it yourself: Quill\n\n\n\nR\n\n\nshiny\n\n\nR packages\n\n\nquill\n\n\n\nHow I built Quill, an R package that brings rich text editing to Shiny and R Markdown using QuillJS\n\n\n\nÁlvaro Sánchez\n\n\nNov 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA comprehensive analysis of market sales\n\n\n\nR\n\n\nWORK-IN-PROGRESS\n\n\ntime series\n\n\n\nTBD\n\n\n\nÁlvaro Sánchez\n\n\nNov 19, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimulating the Birthday Paradox\n\n\n\nR\n\n\necharts\n\n\nsimulation\n\n\n\nI couldn’t believe the birthday paradox, so I tested it!\n\n\n\nÁlvaro Sánchez\n\n\nMar 10, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "During the last years, the vast majority of my work is stored in private repositories and even private GitHub/GitLab accounts. So this part will be quite empty for now :(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuill\n\n\n\nR\n\n\nquill\n\n\nshiny\n\n\n\nA text editor for R\n\n\n\nÁlvaro Sánchez\n\n\nJul 11, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndrawCell\n\n\n\nR\n\n\nlife sciences\n\n\nshiny\n\n\n\ncell pictures in R\n\n\n\nÁlvaro Sánchez\n\n\nOct 10, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProteoViewer\n\n\n\nR\n\n\nlife sciences\n\n\nshiny\n\n\nproteomics\n\n\n\nAnalyse peptide intensities from proteomics LC-MS/MS experiment.\n\n\n\nÁlvaro Sánchez\n\n\nFeb 3, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMQmetrics\n\n\n\nR\n\n\nlife sciences\n\n\nproteomics\n\n\n\nReporting the quality control of proteomics experiments\n\n\n\nÁlvaro Sánchez\n\n\nJan 1, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/17-11-2022-drawCell/index.html",
    "href": "projects/17-11-2022-drawCell/index.html",
    "title": "drawCell",
    "section": "",
    "text": "This was originally a proof of concept, check out the Linkedin post. It was later improved with the help of a colleague, (thanks Recle!). You can learn more about it in the blog post that we created at Appsilon.\nCode in GitHub"
  },
  {
    "objectID": "projects/01-02-2022-proteoviewer/index.html",
    "href": "projects/01-02-2022-proteoviewer/index.html",
    "title": "ProteoViewer",
    "section": "",
    "text": "This is an application that allows the user to analyse peptide intensities from a LC-MS/MS experiment.\nHere is the repo. However, it’s no longer maintained."
  },
  {
    "objectID": "projects/10-01-2022-mqmetrics/index.html",
    "href": "projects/10-01-2022-mqmetrics/index.html",
    "title": "MQmetrics",
    "section": "",
    "text": "This is an R packaged aimed to check the quality control in a typical protemics experiment. It was released with Bioconductor. Here is the repo."
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html",
    "href": "posts/19-11-2024-quill/index.html",
    "title": "Build it yourself: Quill",
    "section": "",
    "text": "I worked once on a legacy code base where there hundreds (or more!) of lines to implement a text editor. This code was an R shiny web application, and I noticed that this tool, a library that quickly loads a text editor didn’t exist in the R world.\nSo, I decided to build one myself."
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#plan",
    "href": "posts/19-11-2024-quill/index.html#plan",
    "title": "Creating Quill: Bringing Rich Text Editing to R",
    "section": "Plan",
    "text": "Plan\nThe idea is simple. I’ll create multiple groups from two to n number of people. For each group, I’ll count how many times at least two people share a birthday. Then repeat this process multiple times (y), to obtain reproducible results\nSo if n = 4, means a group of four people, and y = 5, means to check the probabilities three times. The simulation will be like this:\n\nChoose two random people (n - 2), do they share a birthday? –&gt; Count the result. Repeat y times. Calculate the probability for a group of two people.\nChoose three random people (n - 1), do at least two of them share a birthday? –&gt; Count the result. Repeat y times. Calculate the probability for a group of three people.\nChoose four random people (n), do at least two of them share a birthday?? –&gt; Count the result. Repeat y times. Calculate the probability for a group of four people.\n\nFor each group, calculating the probability is simple. For example, if in the group of four people, only there was a simulation were people shared birthdays but no shared birthdays in the other four, the probability would be 1/5 = 20%."
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#simulation",
    "href": "posts/19-11-2024-quill/index.html#simulation",
    "title": "Creating Quill: Bringing Rich Text Editing to R",
    "section": "Simulation",
    "text": "Simulation\nLet’s select bigger groups of up to 80 people, and let’s check them 1000 times each.\n\nnumber_people &lt;- 80\nnumber_tests &lt;- 1000\n\nWe need a function that creates random birthdays for a group of n people.\n\ngenerate_birthdays &lt;- function(n_people_group) {\n  round(runif(n = n_people_group, min = 1, max = 365), digits = 0 )\n}\ngenerate_birthdays(3)\n\n[1] 332 231  19\n\ngenerate_birthdays(10)\n\n [1] 316 176  66 217 314  93 193  95 112 302\n\n\nNote, how we are assuming that birthdays are randomly and uniformly distributed across the population. In reality, more people are born in September and October.\nLet’s create a function that will tell us if at least two people share a birthday: Since there are 365 per year we can just numbers from 1 to 365.\n\nbday_group_3_people &lt;- c(10, 46, 209) # noone share birthday, should be false\nbday_group_5_people &lt;- c(10, 46, 209, 46, 265) # two people share birthdays, should be true\nbday_group_7_people&lt;- c(10, 46, 209, 46, 265, 46, 2) # Three people share birthday, should be true\n\ncheck_share_birthday &lt;- function(data, min_num_shared_birthdays = 2) {\n  max(table(data)) &gt;= min_num_shared_birthdays\n}\n# table is a nice function that does the count for us:\ntable(bday_group_5_people)\n\nbday_group_5_people\n 10  46 209 265 \n  1   2   1   1 \n\n# Checking that the function works as expected\ncheck_share_birthday(bday_group_3_people)\n\n[1] FALSE\n\ncheck_share_birthday(bday_group_5_people)\n\n[1] TRUE\n\ncheck_share_birthday(bday_group_7_people)\n\n[1] TRUE\n\n\nThis is where the fun happens: Now we just iterate over the groups. We create a vector containing the birthdays of those people and check if those people share a birthday, if they do, we keep track of it. Then we repeat this process y times. Once we have completed y tests for a single group, we move to the next one and repeat the process.\n\nset.seed(123)\nresults &lt;- data.frame()\n\nfor(individual_group in 2:number_people) { \n  shared_birthdays_counter &lt;- 0\n\n  for (test in seq_len(number_tests)) { \n    random_birthdays_vector &lt;- generate_birthdays(individual_group) \n    \n    if (check_share_birthday(random_birthdays_vector)) {\n      shared_birthdays_counter &lt;- shared_birthdays_counter + 1\n    }\n\n  }\n  probability_duplicates &lt;- 100 * (shared_birthdays_counter/number_tests)\n\n  results &lt;- rbind(results, c(individual_group, probability_duplicates))\n}\ncolnames(results) &lt;- c(\"people_in_group\", \"probability_shared_birthday\")\nresults &lt;- round(results, 1)\nhead(results)\n\n  people_in_group probability_shared_birthday\n1               2                         0.1\n2               3                         0.7\n3               4                         1.2\n4               5                         2.7\n5               6                         4.2\n6               7                         5.6"
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#results",
    "href": "posts/19-11-2024-quill/index.html#results",
    "title": "Creating Quill: Bringing Rich Text Editing to R",
    "section": "Results",
    "text": "Results\nLet’s check how many people are needed in a group to get a probability of ~50%.\n\nresults |&gt; \n  dplyr::filter(\n    probability_shared_birthday &gt; 45,\n    probability_shared_birthday &lt; 55\n  )\n\n  people_in_group probability_shared_birthday\n1              21                        45.3\n2              22                        45.8\n3              23                        51.9\n4              24                        53.0\n\n\nAccording to our simulation, only 23 people are needed to have a probability of 50% to share a birthday!\nI’m also curious about what is the minimum amount of people where having a shared birthday is almost certain:\n\ngroups_prob_99_perc &lt;- results |&gt; \n  dplyr::filter(\n    probability_shared_birthday &gt; 99\n  )\nhead(groups_prob_99_perc)\n\n  people_in_group probability_shared_birthday\n1              55                        99.1\n2              57                        99.4\n3              59                        99.3\n4              60                        99.2\n5              61                        99.6\n6              62                        99.7\n\n\nIt seems that with 55 people, the chances to have at least one shared birthday are 99%!"
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#visualising-the-results",
    "href": "posts/19-11-2024-quill/index.html#visualising-the-results",
    "title": "Creating Quill: Bringing Rich Text Editing to R",
    "section": "Visualising the results",
    "text": "Visualising the results\nLet’s plot those results and see what we can observe.\n\n\nCode\nlibrary(highcharter)\n\nhchart(\n    results,\n    type = \"line\",\n    hcaes(x = people_in_group, y = probability_shared_birthday)\n  ) |&gt;\n  hc_title(text = \"&lt;b&gt;Probability of at least two people having the same birthday&lt;/b&gt;\") |&gt;\n  hc_subtitle(text = \"&lt;i&gt;A total of 1000 simulations per group were computed&lt;/i&gt;\") |&gt;\n  hc_credits(enabled = TRUE, text = \"https://svalvaro.github.io/\") |&gt;\n  hc_xAxis(title = list(text = \"Number of people in the group\")) |&gt; \n  hc_yAxis(title = list(text = \"Probability (%)\")) |&gt; \n  hc_yAxis(max = 100) |&gt; \n  hc_tooltip(\n    pointFormat = \"\n    &lt;b&gt;# People in the group: &lt;/b&gt;{point.x:,.f}&lt;br&gt;\n    &lt;b&gt;Probability: &lt;/b&gt;{point.y:,.1f}%&lt;br&gt;\"\n  ) |&gt;\n  hc_add_theme(hc_theme_economist())"
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#why-quill",
    "href": "posts/19-11-2024-quill/index.html#why-quill",
    "title": "Build it yourself: Quill",
    "section": "Why Quill?",
    "text": "Why Quill?\nThe idea for Quill came out of necessity. There wasn’t a simple tool in R that allowed developers to embed a rich text editor into their apps. Sure, there are solutions for forms, plots, and dashboards, but nothing specifically for polished text editing.\nThat’s when I discovered QuillJS, a lightweight JavaScript library for building text editors. It was exactly what I was looking for: clean, customizable, and perfect for embedding. But there was a problem—it wasn’t accessible from R. I’d have to bridge the gap. With the use of the R package htmlwidgets this was possible."
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#building-quill-the-journey",
    "href": "posts/19-11-2024-quill/index.html#building-quill-the-journey",
    "title": "Quill: Bringing Rich Text Editing to R",
    "section": "Building Quill: The Journey",
    "text": "Building Quill: The Journey\nCreating an R package around QuillJS meant learning a bit about how R interacts with JavaScript. Thankfully, the htmlwidgets package made the process smoother. Here’s how I went about it:\nStarting with the Basics I started by scaffolding a new widget with htmlwidgets::scaffoldWidget(“quill”). This command sets up the foundation for integrating JavaScript libraries with R.\nEmbedding the QuillJS Library Next, I included QuillJS’s JavaScript and CSS files in the package. These files allow R to “talk” to the Quill editor and render it properly in a browser window (like in Shiny).\nWriting the JavaScript Code The heart of the package is the JavaScript file (quill.js). Here, I wrote the logic to initialize the editor, configure the toolbar, and handle user input. This step involved digging into QuillJS’s documentation to understand its API and experimenting to see what worked.\nCreating the R Function I wanted the package to be simple to use. With the quill() function, users can add a rich text editor to their apps with just one line of code. I also included options for customizing the editor—like enabling headers, lists, or links—so developers could tailor it to their needs."
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#testing-in-shiny",
    "href": "posts/19-11-2024-quill/index.html#testing-in-shiny",
    "title": "Quill: Bringing Rich Text Editing to R",
    "section": "Testing in Shiny",
    "text": "Testing in Shiny\nOnce the basics were working, I tested the widget in a Shiny app. This was the fun part: I used the powerful end to end tests with shinytest2.\nWhat Quill Can Do The Quill package makes it easy to:\nAdd a modern text editor to Shiny apps or R Markdown documents. Customize the toolbar to include options like bold, italics, headers, or links. Retrieve and process user input in real-time. Lessons Learned Creating Quill wasn’t as straightforward as I first imagined. Debugging the interaction between JavaScript and R took patience. There were moments when I questioned if I’d bitten off more than I could chew. But pushing through those challenges taught me a lot—not just about building htmlwidgets but also about how powerful the R ecosystem is when combined with web technologies.\nWhy This Matters Quill fills a small but important gap in the R world. It’s not just about creating a text editor—it’s about empowering R developers to build richer, more interactive tools.\nFinal Thoughts If you’ve ever thought, “Why isn’t there a package for this?” you’re not alone. The beauty of open-source is that if something doesn’t exist, you can build it. That’s what I did with Quill, and I hope it inspires others to do the same.\nTry Quill out on GitHub and let me know how it works for you. I’m always open to feedback and new ideas!"
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#how-to-use-quill",
    "href": "posts/19-11-2024-quill/index.html#how-to-use-quill",
    "title": "Build it yourself: Quill",
    "section": "How to use quill?",
    "text": "How to use quill?\nLike any other htmlwidget, there is an UI function: quillOutput(), and a server function: renderQuill(). You can select the options of the toolbar with toolbar_options.\n\n## basic example of functioning in Shiny\nlibrary(quill)\n\nui &lt;- fluidPage(\n  ... \n  quillOutput(\"text_editor\")\n  ...\n)\n\nserver &lt;- function(input, output, ...) {\n  ...\n  output$text_editor &lt;- renderQuill({\n    quill(toolbar = toolbar_options(code = TRUE)) \n  })\n\n  # You can listen what the user is writing in HTML, JSON, and plain text\n  observeEvent(input$text_editor_content, {\n    get_editor_content(input$text_editor_content, format = \"HTML\")\n  }\n  ...\n}\n\nYou can see an example Shiny app here."
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#what-quill-can-do",
    "href": "posts/19-11-2024-quill/index.html#what-quill-can-do",
    "title": "Build it yourself: Quill",
    "section": "What Quill Can Do",
    "text": "What Quill Can Do\nThe Quill package makes it easy to:\n\nAdd a modern text editor to Shiny apps or R Markdown documents.\nCustomize the toolbar to include options like bold, italics, headers, or links.\nRetrieve and process user input in real-time. Lessons Learned\n\nIf you’ve ever thought, “Why isn’t there a package for this?” you’re not alone. The beauty of open-source is that if something doesn’t exist, you can build it. That’s what I did with Quill, and I hope it inspires others to do the same.\nTry Quill out on GitHub and let me know how it works for you. I’m always open to feedback and new ideas!"
  },
  {
    "objectID": "posts/19-11-2024-quill/index.html#example",
    "href": "posts/19-11-2024-quill/index.html#example",
    "title": "Build it yourself: Quill",
    "section": "Example",
    "text": "Example\n\nlibrary(quill)\nquill(toolbar_options(image = FALSE, video = FALSE))"
  },
  {
    "objectID": "projects/19-11-2024-quill/index.html",
    "href": "projects/19-11-2024-quill/index.html",
    "title": "quill",
    "section": "",
    "text": "library(quill)\nquill(toolbar_options(image = FALSE, video = FALSE))\n\n\n\n\n\nThe Quill package makes it easy to:\n\nAdd a modern text editor to Shiny apps or R Markdown documents.\nCustomize the toolbar to include options like bold, italics, headers, or links.\nRetrieve and process user input in real-time. Lessons Learned\n\nCode in GitHub"
  },
  {
    "objectID": "posts/30-11-2024-timeseries/index.html",
    "href": "posts/30-11-2024-timeseries/index.html",
    "title": "A comprehensive analysis of market sales",
    "section": "",
    "text": "WORK IN PROGRESS\n\n\nTime Series Analysis\nWe’ll be using a sales dataset from a supermakert chain source.\n\n\nCode\ndataset &lt;- readr::read_csv(\"data.csv\")\nhead(dataset) |&gt; \n  kableExtra::kable(\"html\") \n\n\n\n\n\nInvoice ID\nBranch\nCity\nCustomer type\nGender\nProduct line\nUnit price\nQuantity\nTax 5%\nTotal\nDate\nTime\nPayment\ncogs\ngross margin percentage\ngross income\nRating\n\n\n\n\n750-67-8428\nA\nYangon\nMember\nFemale\nHealth and beauty\n74.69\n7\n26.1415\n548.9715\n1/5/2019\n13:08:00\nEwallet\n522.83\n4.761905\n26.1415\n9.1\n\n\n226-31-3081\nC\nNaypyitaw\nNormal\nFemale\nElectronic accessories\n15.28\n5\n3.8200\n80.2200\n3/8/2019\n10:29:00\nCash\n76.40\n4.761905\n3.8200\n9.6\n\n\n631-41-3108\nA\nYangon\nNormal\nMale\nHome and lifestyle\n46.33\n7\n16.2155\n340.5255\n3/3/2019\n13:23:00\nCredit card\n324.31\n4.761905\n16.2155\n7.4\n\n\n123-19-1176\nA\nYangon\nMember\nMale\nHealth and beauty\n58.22\n8\n23.2880\n489.0480\n1/27/2019\n20:33:00\nEwallet\n465.76\n4.761905\n23.2880\n8.4\n\n\n373-73-7910\nA\nYangon\nNormal\nMale\nSports and travel\n86.31\n7\n30.2085\n634.3785\n2/8/2019\n10:37:00\nEwallet\n604.17\n4.761905\n30.2085\n5.3\n\n\n699-14-3026\nC\nNaypyitaw\nNormal\nMale\nElectronic accessories\n85.39\n7\n29.8865\n627.6165\n3/25/2019\n18:30:00\nEwallet\n597.73\n4.761905\n29.8865\n4.1\n\n\n\n\n\n\n\nLet’s have a look at what the data looks like\n\n\nCode\ndplyr::glimpse(dataset)\n\n\nRows: 1,000\nColumns: 17\n$ `Invoice ID`              &lt;chr&gt; \"750-67-8428\", \"226-31-3081\", \"631-41-3108\",…\n$ Branch                    &lt;chr&gt; \"A\", \"C\", \"A\", \"A\", \"A\", \"C\", \"A\", \"C\", \"A\",…\n$ City                      &lt;chr&gt; \"Yangon\", \"Naypyitaw\", \"Yangon\", \"Yangon\", \"…\n$ `Customer type`           &lt;chr&gt; \"Member\", \"Normal\", \"Normal\", \"Member\", \"Nor…\n$ Gender                    &lt;chr&gt; \"Female\", \"Female\", \"Male\", \"Male\", \"Male\", …\n$ `Product line`            &lt;chr&gt; \"Health and beauty\", \"Electronic accessories…\n$ `Unit price`              &lt;dbl&gt; 74.69, 15.28, 46.33, 58.22, 86.31, 85.39, 68…\n$ Quantity                  &lt;dbl&gt; 7, 5, 7, 8, 7, 7, 6, 10, 2, 3, 4, 4, 5, 10, …\n$ `Tax 5%`                  &lt;dbl&gt; 26.1415, 3.8200, 16.2155, 23.2880, 30.2085, …\n$ Total                     &lt;dbl&gt; 548.9715, 80.2200, 340.5255, 489.0480, 634.3…\n$ Date                      &lt;chr&gt; \"1/5/2019\", \"3/8/2019\", \"3/3/2019\", \"1/27/20…\n$ Time                      &lt;time&gt; 13:08:00, 10:29:00, 13:23:00, 20:33:00, 10:…\n$ Payment                   &lt;chr&gt; \"Ewallet\", \"Cash\", \"Credit card\", \"Ewallet\",…\n$ cogs                      &lt;dbl&gt; 522.83, 76.40, 324.31, 465.76, 604.17, 597.7…\n$ `gross margin percentage` &lt;dbl&gt; 4.761905, 4.761905, 4.761905, 4.761905, 4.76…\n$ `gross income`            &lt;dbl&gt; 26.1415, 3.8200, 16.2155, 23.2880, 30.2085, …\n$ Rating                    &lt;dbl&gt; 9.1, 9.6, 7.4, 8.4, 5.3, 4.1, 5.8, 8.0, 7.2,…\n\n\n\n\nWhat are these folks buying?\nLet’s check what are people buying…\n\n\nCode\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(dplyr)\nlibrary(hrbrthemes)\nsource(\"helper_functions.R\")\n\n# Let's aggregate the data\ndata_product &lt;- dataset |&gt; \n  mutate(\n    formatted_date = lubridate::mdy(Date)\n  ) |&gt; \n  group_by(Branch, formatted_date, `Product line`) |&gt;\n  summarise(\n    n_products_sold = sum(Quantity),\n    .groups = \"drop\"\n  )\n\n# A function that we can use to plot the sales for the products at any branch\nstream_plot &lt;- function(data, branch) {\n  data |&gt; \n  filter(Branch == branch) |&gt; \n  ggplot(aes(x = formatted_date, y = n_products_sold, fill = `Product line`)) +\n  geom_area() +\n  scale_fill_manual(values= c(\"#6d2f20\", \"#df7e66\", \"#e09351\", \"#edc775\", \"#94b594\", \"#224b5e\")) +\n  theme_ipsum() +\n  theme(legend.position = \"none\",\n        axis.text.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank()\n        ) +\n  labs(x = \"\", y = \"\") +\n  ylim(0, 65)\n}\n\n# Lets create the three individual plots\nplot_a &lt;- stream_plot(data_product, \"A\") + \n      theme(legend.position = \"none\")\nplot_b &lt;- stream_plot(data_product, \"B\")+ \n      theme(legend.position = \"none\")\nplot_c &lt;- stream_plot(data_product, \"C\") +\n  theme(\n    legend.position = c(0.52, -0.25),\n    legend.direction = \"horizontal\",\n    legend.text = element_blank(),\n    legend.title = element_blank(),\n    legend.key.height = unit(0.75, \"cm\"),\n    legend.key.width = unit(3.1, \"cm\")\n  ) +\n  guides(fill = guide_legend(nrow = 1)) \n  \n# Putting everything together\nggdraw(plot_grid(plot_a, plot_b, plot_c, ncol=1)) +\n  theme(\n    plot.background = element_rect(fill=\"#fbf7f0\", color=\"#fbf7f0\"),\n    plot.margin = margin(50, 30, 10)\n  ) +\n  draw_text(text = \"# Products sold daily\", x=0.5, y=1.06, fontface=\"bold\", size= 30, family=font1, color=\"#224b5e\") +\n  draw_text(text=\"Jan\", x=0.15, y=0.98, size=15, family=font2, color=\"#224b5e\") +\n  draw_text(text=\"Feb\", x=0.4, y=0.98, size=15, family=font2, color=\"#224b5e\") +\n  draw_text(text=\"Mar\", x=0.65, y=0.98, size=15, family=font2, color=\"#224b5e\") +\n  draw_text(text=\"Apr\", x=0.9, y=0.98, size=15, family=font2, color=\"#224b5e\") +\n  draw_text(text=\"Electronics\", x=0.11, y=0.035, size=12, family=font2, fontface=\"bold\", color=\"#fbf7f0\") +\n  draw_text(text=\"Fashion\", x=0.28, y=0.035, size=12, family=font2, fontface=\"bold\", color=\"#fbf7f0\") +\n  draw_text(text=\"Food\", x=0.45, y=0.035, size=12, family=font2, fontface=\"bold\", color=\"#fbf7f0\") +\n  draw_text(text=\"Health\", x=0.62, y=0.035, size=12, family=font2, fontface=\"bold\", color=\"#fbf7f0\") +\n  draw_text(text=\"Home\", x=0.79, y=0.035, size=12, family=font2, fontface=\"bold\", color=\"#fbf7f0\") +\n  draw_text(text=\"Sports\", x=0.97, y=0.035, size=12, family=font2, fontface=\"bold\", color=\"#fbf7f0\") +\n  draw_text(text=\"Branch A\", x=0.96, y=0.84, size=20, family=font1, hjust=0, color=\"#224b5e\") +\n  draw_text(text=\"Branch B\", x=0.96, y=0.505, size=20, family=font1, hjust=0, color=\"#224b5e\") +\n  draw_text(text=\"Branch C\", x=0.96, y=0.17, size=20, family=font1, hjust=0, color=\"#224b5e\") \n\n\n\n\n\n\n\n\n\nIt can be also interesting to see what are the products being bought between genders. Let’s check first the number of males and females in each branch.\n\n\nCode\ndataset |&gt; \n  group_by(Branch, Gender) |&gt; \n  summarise(n = n(), .groups = \"drop\") |&gt; \n  group_by(Branch) |&gt; \n  arrange(desc(Gender)) |&gt; \n  mutate(proportion = paste0(round(n / sum(n) *100, 1), \"%\")) |&gt; \n  mutate(ypos = cumsum(n) - 0.5*n ) |&gt; \n  ggplot(aes(x = Branch, y = n, fill = Gender)) +\n  geom_col() +\n  scale_fill_manual(values= c(\"#8bdcc9\",  \"#fe957f\")) +\n  custom_theme() +\n  geom_text(aes(y = ypos, label = proportion), color = \"white\", size = 5) +\n  labs(y = \"\", title = \"Gender summary per branch\")\n\n\n\n\n\n\n\n\n\n\n\nCode\ndata_product_gender &lt;- dataset |&gt; \n  mutate(\n    date = lubridate::mdy(Date)\n  ) |&gt; \n  group_by(Branch, `Product line`, Gender) |&gt;\n  summarise(\n    n_products_sold = sum(Quantity),\n    .groups = \"drop\"\n  )\n\n\n\n\nDaily sales\n\n\nCode\nlibrary(dplyr)\nlibrary(lubridate)\n\nsummary &lt;- dataset |&gt; \n  mutate(\n    formatted_date = lubridate::mdy(Date)\n  ) |&gt; \n  group_by(Branch, formatted_date) |&gt;\n  summarise(\n    sum_sales = sum(Total),\n    .groups = \"drop\"\n  )\n\nsummary |&gt; \n  head() |&gt; \n  kableExtra::kable(\"html\") \n\n\n\n\n\nBranch\nformatted_date\nsum_sales\n\n\n\n\nA\n2019-01-01\n2371.3200\n\n\nA\n2019-01-02\n307.0515\n\n\nA\n2019-01-03\n937.4085\n\n\nA\n2019-01-04\n483.2625\n\n\nA\n2019-01-05\n2024.5050\n\n\nA\n2019-01-06\n1309.9695\n\n\n\n\n\n\n\nWe can use ggplot2 for visualising the data\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(viridis)\n\n# I'll load a custom theme\n\nsource(\"helper_functions.R\")\n\ntemp_summary &lt;- summary |&gt; \n  mutate(name_branch = Branch)\n\ntemp_summary |&gt; \n  ggplot(aes(x = formatted_date, y = sum_sales)) +\n    geom_line( data=temp_summary %&gt;% dplyr::select(-Branch), aes(group=name_branch), color=\"grey\", size=0.5, alpha=0.5) +\n    geom_line( aes(color = Branch), color=\"#69b3a2\", size=1.2 )+\n    scale_color_viridis(discrete = TRUE) +\n    custom_theme() +\n    theme(\n      legend.position=\"none\",\n      plot.title = element_text(size=14),\n      axis.title.y = element_blank(),\n      axis.title.x = element_blank()\n    ) +\n    labs(\n      title = \"Daily Sales ($)\",\n      subtitle = \"Daily sales in the first quarter of 2019 in three different branches\",\n      caption = \"https://svalvaro.github.io/\"\n      \n    ) + \n    facet_wrap(~Branch, ncol = 1)\n\n\n\n\n\n\n\n\n\nLet’s add some interactivity and use the plotly library"
  }
]