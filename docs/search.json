[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Hola! I’m glad that you have found this place, I hope you can learn something new while browsing around here :).\nI use technology to solve problems, and I love doing that. I started as a bioinformatician, answering biological questions about data. Currently, I’m working as a R developer, I create digital solutions (Web applications, R packages, Report generation, and much more!). A\nYou might find me hiking outdoors or playing chess!"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV",
    "section": "",
    "text": "I prefer to have control of who has access to my CV. Drop me a message on Linkedin, and I’d be more than happy to send you my CV!\nHere is a meme for the inconvenience!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Currently, I am working as an R developer at Appsilon. I am focused on creating web applications focused on data analysis and data visualization for pharmaceutical companies, such as Merck, J&J or Genmab. Usually, the typical tools that I use for these are R, CSS, HTML, SQL and Javascript. This is a job I love doing; it combines my interests in life sciences and programming.\nI am a curious person by heart; I need to understand the how and why of things. That’s why after my bachelor’s in Biotechnology, I decided to study a master’s in Genetics and Evolution. This fascinating world led me to move to Prague, Czech Republic. There, I studied the genetics of Mice and their metabolism for a couple of years. I slowly became a self-taught programmer and I started to work as a bioinformatician in the proteomics field I discovered R Shiny and quickly started to create apps for my former lab, later Appsilon discovered me, reaching the present.\nI love learning by creating proof of concepts (it’s fun!). I’ll never forget when I was tinkering around with APIs, I created an R package that went kinda viral on Linkedin."
  },
  {
    "objectID": "about.html#fa-code-titlecode-symbol-profession",
    "href": "about.html#fa-code-titlecode-symbol-profession",
    "title": "About",
    "section": "",
    "text": "Currently, I am working as an R developer at Appsilon. I am focused on creating web applications focused on data analysis and data visualization for pharmaceutical companies, such as Merck, J&J or Genmab. Usually, the typical tools that I use for these are R, CSS, HTML, SQL and Javascript. This is a job I love doing; it combines my interests in life sciences and programming.\nI am a curious person by heart; I need to understand the how and why of things. That’s why after my bachelor’s in Biotechnology, I decided to study a master’s in Genetics and Evolution. This fascinating world led me to move to Prague, Czech Republic. There, I studied the genetics of Mice and their metabolism for a couple of years. I slowly became a self-taught programmer and I started to work as a bioinformatician in the proteomics field I discovered R Shiny and quickly started to create apps for my former lab, later Appsilon discovered me, reaching the present.\nI love learning by creating proof of concepts (it’s fun!). I’ll never forget when I was tinkering around with APIs, I created an R package that went kinda viral on Linkedin."
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html",
    "href": "posts/03-10-2023-birthday-paradox/index.html",
    "title": "Simulating the Birthday Paradox",
    "section": "",
    "text": "Paradoxes are named as such because they are counterintuitive. And this gives us, data-curious people, an excellent chance to play around with them.\nHow many people are needed so the probability that at least, two of them share a birthday is 50%?\nI suggest the reader stop for a couple of minutes and think about it. When I learned the answer, I was so surprised that I had to test it to believe it.\nGo to Results if you just want to know what is the probability."
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#plan",
    "href": "posts/03-10-2023-birthday-paradox/index.html#plan",
    "title": "Simulating the Birthday Paradox",
    "section": "Plan",
    "text": "Plan\nThe idea is simple. I’ll create multiple groups from two to n number of people. For each group, I’ll count how many times at least two people share a birthday. Then repeat this process multiple times (y), to obtain reproducible results\nSo if n = 4, means a group of four people, and y = 5, means to check the probabilities three times. The simulation will be like this:\n\nChoose two random people (n - 2), do they share a birthday? –&gt; Count the result. Repeat y times. Calculate the probability for a group of two people.\nChoose three random people (n - 1), do at least two of them share a birthday? –&gt; Count the result. Repeat y times. Calculate the probability for a group of three people.\nChoose four random people (n), do at least two of them share a birthday?? –&gt; Count the result. Repeat y times. Calculate the probability for a group of four people.\n\nFor each group, calculating the probability is simple. For example, if in the group of four people, only there was a simulation were people shared birthdays but no shared birthdays in the other four, the probability would be 1/5 = 20%."
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#simulation",
    "href": "posts/03-10-2023-birthday-paradox/index.html#simulation",
    "title": "Simulating the Birthday Paradox",
    "section": "Simulation",
    "text": "Simulation\nLet’s select bigger groups of up to 80 people, and let’s check them 1000 times each.\n\nnumber_people &lt;- 80\nnumber_tests &lt;- 1000\n\nWe need a function that creates random birthdays for a group of n people.\n\ngenerate_birthdays &lt;- function(n_people_group) {\n  round(runif(n = n_people_group, min = 1, max = 365), digits = 0 )\n}\ngenerate_birthdays(3)\n\n[1]  94  39 354\n\ngenerate_birthdays(10)\n\n [1] 323   5 128 169 110   1 100 347 125  68\n\n\nNote, how we are assuming that birthdays are randomly and uniformly distributed across the population. In reality, more people are born in September and October.\nLet’s create a function that will tell us if at least two people share a birthday: Since there are 365 per year we can just numbers from 1 to 365.\n\nbday_group_3_people &lt;- c(10, 46, 209) # noone share birthday, should be false\nbday_group_5_people &lt;- c(10, 46, 209, 46, 265) # two people share birthdays, should be true\nbday_group_7_people&lt;- c(10, 46, 209, 46, 265, 46, 2) # Three people share birthday, should be true\n\ncheck_share_birthday &lt;- function(data, min_num_shared_birthdays = 2) {\n  max(table(data)) &gt;= min_num_shared_birthdays\n}\n# table is a nice function that does the count for us:\ntable(bday_group_5_people)\n\nbday_group_5_people\n 10  46 209 265 \n  1   2   1   1 \n\n# Checking that the function works as expected\ncheck_share_birthday(bday_group_3_people)\n\n[1] FALSE\n\ncheck_share_birthday(bday_group_5_people)\n\n[1] TRUE\n\ncheck_share_birthday(bday_group_7_people)\n\n[1] TRUE\n\n\nThis is where the fun happens: Now we just iterate over the groups. We create a vector containing the birthdays of those people and check if those people share a birthday, if they do, we keep track of it. Then we repeat this process y times. Once we have completed y tests for a single group, we move to the next one and repeat the process.\n\nset.seed(123)\nresults &lt;- data.frame()\n\nfor(individual_group in 2:number_people) { \n  shared_birthdays_counter &lt;- 0\n\n  for (test in seq_len(number_tests)) { \n    random_birthdays_vector &lt;- generate_birthdays(individual_group) \n    \n    if (check_share_birthday(random_birthdays_vector)) {\n      shared_birthdays_counter &lt;- shared_birthdays_counter + 1\n    }\n\n  }\n  probability_duplicates &lt;- 100 * (shared_birthdays_counter/number_tests)\n\n  results &lt;- rbind(results, c(individual_group, probability_duplicates))\n}\ncolnames(results) &lt;- c(\"people_in_group\", \"probability_shared_birthday\")\nresults &lt;- round(results, 1)\nhead(results)\n\n  people_in_group probability_shared_birthday\n1               2                         0.1\n2               3                         0.7\n3               4                         1.2\n4               5                         2.7\n5               6                         4.2\n6               7                         5.6"
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#results",
    "href": "posts/03-10-2023-birthday-paradox/index.html#results",
    "title": "Simulating the Birthday Paradox",
    "section": "Results",
    "text": "Results\nLet’s check how many people are needed in a group to get a probability of ~50%.\n\nresults |&gt; \n  dplyr::filter(\n    probability_shared_birthday &gt; 45,\n    probability_shared_birthday &lt; 55\n  )\n\n  people_in_group probability_shared_birthday\n1              21                        45.3\n2              22                        45.8\n3              23                        51.9\n4              24                        53.0\n\n\nAccording to our simulation, only 23 people are needed to have a probability of 50% to share a birthday!\nI’m also curious about what is the minimum amount of people where having a shared birthday is almost certain:\n\ngroups_prob_99_perc &lt;- results |&gt; \n  dplyr::filter(\n    probability_shared_birthday &gt; 99\n  )\nhead(groups_prob_99_perc)\n\n  people_in_group probability_shared_birthday\n1              55                        99.1\n2              57                        99.4\n3              59                        99.3\n4              60                        99.2\n5              61                        99.6\n6              62                        99.7\n\n\nIt seems that with 55 people, the chances to have at least one shared birthday are 99%!"
  },
  {
    "objectID": "posts/03-10-2023-birthday-paradox/index.html#visualising-the-results",
    "href": "posts/03-10-2023-birthday-paradox/index.html#visualising-the-results",
    "title": "Simulating the Birthday Paradox",
    "section": "Visualising the results",
    "text": "Visualising the results\nLet’s plot those results and see what we can observe.\n\n\nCode\nlibrary(highcharter)\n\nhchart(\n    results,\n    type = \"line\",\n    hcaes(x = people_in_group, y = probability_shared_birthday)\n  ) |&gt;\n  hc_title(text = \"&lt;b&gt;Probability of at least two people having the same birthday&lt;/b&gt;\") |&gt;\n  hc_subtitle(text = \"&lt;i&gt;A total of 1000 simulations per group were computed&lt;/i&gt;\") |&gt;\n  hc_credits(enabled = TRUE, text = \"https://svalvaro.github.io/\") |&gt;\n  hc_xAxis(title = list(text = \"Number of people in the group\")) |&gt; \n  hc_yAxis(title = list(text = \"Probability (%)\")) |&gt; \n  hc_yAxis(max = 100) |&gt; \n  hc_tooltip(\n    pointFormat = \"\n    &lt;b&gt;# People in the group: &lt;/b&gt;{point.x:,.f}&lt;br&gt;\n    &lt;b&gt;Probability: &lt;/b&gt;{point.y:,.1f}%&lt;br&gt;\"\n  ) |&gt;\n  hc_add_theme(hc_theme_economist())"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "Simulating the Birthday Paradox\n\n\n\nR\n\n\necharts\n\n\nsimulation\n\n\n\nI couldn’t believe the birthday paradox, so I tested it!\n\n\n\nÁlvaro Sánchez\n\n\nMar 10, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "During the last years, the vast majority of my work is stored in private repositories and even private GitHub/GitLab accounts. So this part will be quite empty for now :(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndrawCell\n\n\n\nR\n\n\nlife sciences\n\n\nshiny\n\n\n\ncell pictures in R\n\n\n\nÁlvaro Sánchez\n\n\nMar 10, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/17-11-2022-drawCell/index.html",
    "href": "projects/17-11-2022-drawCell/index.html",
    "title": "drawCell",
    "section": "",
    "text": "This was originally a proof of concept, check out the Linkedin post. It was later improved with the help of a colleague, (thanks Recle!). You can learn more about it in the blog post that we created at Appsilon.\nCode in GitHub"
  }
]